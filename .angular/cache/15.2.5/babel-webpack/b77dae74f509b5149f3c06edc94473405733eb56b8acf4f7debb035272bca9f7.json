{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PokemonService {\n  constructor(http) {\n    this.http = http;\n    this.pokemonsUrl = 'api/pokemons';\n  }\n  // getPokemons(): Pokemon[]{\n  //     return POKEMONS\n  // }\n  log(log) {\n    console.info(log);\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.log(error);\n      console.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n  //le pipe async est un pipe capable de consommer des Observavle(ou Promise) en appelant\n  //implicitement la methode subscribe ( ou then) afin de de \"binder\" les valeurs contenus dans\n  //l'observable (ou la promise)\n  getPokemons() {\n    return this.http.get(this.pokemonsUrl).pipe(tap(_ => this.log('fetched pokemons')), catchError(this.handleError('getPokemons', [])));\n  }\n  // getPokenons():Observable<any>{\n  //     return this.http.get(this.pokemonsUrl)\n  // }\n  //Retourne le pokémon avec l'identifiant passé en paramètre\n  getPokemon(id) {\n    const url = `${this.pokemonsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched pokemons`)), catchError(this.handleError(`getPokemon id=${id}`)));\n  }\n  UpdatePokemon(pokemon) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.put(this.pokemonsUrl, pokemon, httpOptions).pipe(tap(_ => this.log(`updated Pokemon id=${pokemon.id}`)), catchError(this.handleError('updatePokemon')));\n  }\n  getPokemonTypes() {\n    return ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol'];\n  }\n}\nPokemonService.ɵfac = function PokemonService_Factory(t) {\n  return new (t || PokemonService)(i0.ɵɵinject(i1.HttpClient));\n};\nPokemonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PokemonService,\n  factory: PokemonService.ɵfac\n});","map":{"version":3,"mappings":"AAIA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,UAAU,EAAEC,GAAG,QAAQ,MAAM;;;AAItC,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEhB,gBAAW,GAAG,cAAc;EAFG;EAIvC;EACA;EACA;EAEQC,GAAG,CAACA,GAAW;IACrBC,OAAO,CAACC,IAAI,CAACF,GAAG,CAAC;EACnB;EAEQG,WAAW,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MACnCL,OAAO,CAACD,GAAG,CAACM,KAAK,CAAC;MAClBL,OAAO,CAACD,GAAG,CAAC,GAAGI,SAAS,YAAYE,KAAK,CAACC,OAAO,EAAE,CAAC;MAEpD,OAAOb,EAAE,CAACW,MAAW,CAAC;IACxB,CAAC;EACH;EAEA;EACA;EACA;EACAG,WAAW;IACT,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAY,IAAI,CAACC,WAAW,CAAC,CAACC,IAAI,CACpDf,GAAG,CAAEgB,CAAC,IAAK,IAAI,CAACZ,GAAG,CAAC,kBAAkB,CAAC,CAAC,EACxCL,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAChD;EACH;EAEA;EACA;EACA;EAEA;EACAU,UAAU,CAACC,EAAU;IACnB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,WAAW,IAAII,EAAE,EAAE;IAEvC,OAAO,IAAI,CAACf,IAAI,CAACU,GAAG,CAAUM,GAAG,CAAC,CAACJ,IAAI,CACrCf,GAAG,CAAEgB,CAAC,IAAK,IAAI,CAACZ,GAAG,CAAC,kBAAkB,CAAC,CAAC,EACxCL,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAU,iBAAiBW,EAAE,EAAE,CAAC,CAAC,CAC7D;EACH;EAEAE,aAAa,CAACC,OAAgB;IAC5B,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAI1B,WAAW,CAAC;QAAC,cAAc,EAAE;MAAkB,CAAC;KAC9D;IACD,OAAO,IAAI,CAACM,IAAI,CAACqB,GAAG,CAAC,IAAI,CAACV,WAAW,EAAEO,OAAO,EAAEC,WAAW,CAAC,CAACP,IAAI,CAC/Df,GAAG,CAACgB,CAAC,IAAI,IAAI,CAACZ,GAAG,CAAC,sBAAsBiB,OAAO,CAACH,EAAE,EAAE,CAAC,CAAC,EACtDnB,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAM,eAAe,CAAC,CAAC,CACnD;EACH;EAEAkB,eAAe;IACb,OAAO,CACL,QAAQ,EACR,KAAK,EACL,KAAK,EACL,SAAS,EACT,QAAQ,EACR,UAAU,EACV,QAAQ,EACR,KAAK,EACL,KAAK,CACN;EACH;;AApEWxB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAyB,SAAdzB,cAAc;AAAA","names":["HttpHeaders","of","catchError","tap","PokemonService","constructor","http","log","console","info","handleError","operation","result","error","message","getPokemons","get","pokemonsUrl","pipe","_","getPokemon","id","url","UpdatePokemon","pokemon","httpOptions","headers","put","getPokemonTypes","factory"],"sourceRoot":"","sources":["/Users/kseyo/Desktop/pokemon/STARTCODE/src/app/pokemon.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Pokemon } from './pokemons/donnees-pokemons/pokemon';\nimport { POKEMONS } from './pokemons/donnees-pokemons/mock-pokemon';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs';\nimport { subscriptionLogsToBeFn } from 'rxjs/internal/testing/TestScheduler';\n\n@Injectable()\nexport class PokemonService {\n  constructor(private http: HttpClient) {}\n\n  private pokemonsUrl = 'api/pokemons';\n\n  // getPokemons(): Pokemon[]{\n  //     return POKEMONS\n  // }\n\n  private log(log: string) {\n    console.info(log);\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.log(error);\n      console.log(`${operation} failed: ${error.message}`);\n\n      return of(result as T);\n    };\n  }\n\n  //le pipe async est un pipe capable de consommer des Observavle(ou Promise) en appelant\n  //implicitement la methode subscribe ( ou then) afin de de \"binder\" les valeurs contenus dans\n  //l'observable (ou la promise)\n  getPokemons(): Observable<Pokemon[]> {\n    return this.http.get<Pokemon[]>(this.pokemonsUrl).pipe(\n      tap((_) => this.log('fetched pokemons')),\n      catchError(this.handleError('getPokemons', []))\n    );\n  }\n\n  // getPokenons():Observable<any>{\n  //     return this.http.get(this.pokemonsUrl)\n  // }\n\n  //Retourne le pokémon avec l'identifiant passé en paramètre\n  getPokemon(id: number): Observable<Pokemon> {\n    const url = `${this.pokemonsUrl}/${id}`;\n\n    return this.http.get<Pokemon>(url).pipe(\n      tap((_) => this.log(`fetched pokemons`)),\n      catchError(this.handleError<Pokemon>(`getPokemon id=${id}`))\n    );\n  }\n\n  UpdatePokemon(pokemon: Pokemon): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({'Content-Type': 'application/json'})\n    };\n    return this.http.put(this.pokemonsUrl, pokemon, httpOptions).pipe(\n      tap(_ => this.log(`updated Pokemon id=${pokemon.id}`)),\n      catchError(this.handleError<any>('updatePokemon'))\n    );\n  }\n\n  getPokemonTypes(): string[] {\n    return [\n      'Plante',\n      'Feu',\n      'Eau',\n      'Insecte',\n      'Normal',\n      'Electrik',\n      'Poison',\n      'Fée',\n      'Vol',\n    ];\n  }\n\n  // HandlePokemon(pokemon: Pokemon): Observable<any> {\n  //   return this.http\n  //     .put<Pokemon>(this.pokemonsUrl, pokemon)\n  //     .pipe(tap(),catchError((err) => {console.log(err);\n  //         return of([]);\n  //       })\n  //     );\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}