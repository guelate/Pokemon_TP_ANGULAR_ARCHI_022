import { Inject, Injectable, Optional, } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { DARK_MODE_OPTIONS } from './dark-mode-options';
import { defaultOptions } from './default-options';
import { isNil } from './isNil';
import * as i0 from "@angular/core";
import * as i1 from "./media-query.service";
export class DarkModeService {
    constructor(rendererFactory, mediaQueryService, 
    // prettier-ignore
    providedOptions) {
        this.rendererFactory = rendererFactory;
        this.mediaQueryService = mediaQueryService;
        this.providedOptions = providedOptions;
        this.options = { ...defaultOptions, ...(this.providedOptions || {}) };
        this.renderer = this.rendererFactory.createRenderer(null, null);
        this.darkModeSubject$ = new BehaviorSubject(this.getInitialDarkModeValue());
        this.darkModeSubject$.getValue() ? this.enable() : this.disable();
        this.removePreloadingClass();
    }
    /**
     * An Observable representing current dark mode.
     * Only fires the initial and distinct values.
     */
    get darkMode$() {
        return this.darkModeSubject$.asObservable().pipe(distinctUntilChanged());
    }
    toggle() {
        this.darkModeSubject$.getValue() ? this.disable() : this.enable();
    }
    enable() {
        const { element, darkModeClass, lightModeClass } = this.options;
        this.renderer.removeClass(element, lightModeClass);
        this.renderer.addClass(element, darkModeClass);
        this.saveDarkModeToStorage(true);
        this.darkModeSubject$.next(true);
    }
    disable() {
        const { element, darkModeClass, lightModeClass } = this.options;
        this.renderer.removeClass(element, darkModeClass);
        this.renderer.addClass(element, lightModeClass);
        this.saveDarkModeToStorage(false);
        this.darkModeSubject$.next(false);
    }
    getInitialDarkModeValue() {
        const darkModeFromStorage = this.getDarkModeFromStorage();
        if (isNil(darkModeFromStorage)) {
            return this.mediaQueryService.prefersDarkMode();
        }
        return darkModeFromStorage;
    }
    saveDarkModeToStorage(darkMode) {
        localStorage.setItem(this.options.storageKey, JSON.stringify({ darkMode }));
    }
    getDarkModeFromStorage() {
        const storageItem = localStorage.getItem(this.options.storageKey);
        if (storageItem) {
            try {
                return JSON.parse(storageItem)?.darkMode;
            }
            catch (error) {
                console.error('Invalid darkMode localStorage item:', storageItem, 'falling back to color scheme media query');
            }
        }
        return null;
    }
    removePreloadingClass() {
        // defer to next tick
        setTimeout(() => {
            this.renderer.removeClass(this.options.element, this.options.preloadingClass);
        });
    }
}
DarkModeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: DarkModeService, deps: [{ token: i0.RendererFactory2 }, { token: i1.MediaQueryService }, { token: DARK_MODE_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
DarkModeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: DarkModeService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: DarkModeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.RendererFactory2 }, { type: i1.MediaQueryService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DARK_MODE_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,